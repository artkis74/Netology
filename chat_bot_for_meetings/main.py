"""
Основной модуль, описывает основную логику бота ВК и запускает его работу.

Содержит основную логику бота. Использует в работе методы класса Bot, который импортируется из соответствующего
модуля. Бот взаимодействует с базой данных, в которой хранит всех пользователей, их списки избранного и черный
список. По этому, для корректной работы бота, на компьютере где он запускается, должна быть предварительно создана
база данных (по умолчанию с именем VKinder) и необходимые таблицы в ней. Подробнее о том, как это сделать, можно узнать
в документации соответствующего модуля, который предоставляет весь этот функционал. Для работы бота необходимы два
ключа доступа (токена) к серверам ВК Api. Ключ (token) c правами доступа сообщества от имени которого будет отвечать
бот, с доступом к сообщениям и фотографиям сообщества, хранится в переменной KEY. Второй ключ (token) c правами
доступа пользователя, необходим для выполнения поиска кандидата и подбора фотографий, хранится в переменной VK_TOKEN.
По умолчанию, оба ключа находятся в файле new_token.ini в переменных key_oauth и vk_access_token и загружаются
автоматически при запуске программы. """


from bot.bot import Bot
import configparser
from DB.db import rec_favorites, rec_blocked, rec_vk_user
import re

config = configparser.ConfigParser()
config.read('new_token.ini')
KEY = config['VK_API']['key_oauth']  # Ключ доступа сообщества
VK_TOKEN = config['VK_API']['vk_access_token']  # Ключ доступа пользователя


def main():
    """
    Основная функция проекта. Содержит основную логику. Запускает работу бота ВК. Использует методы класса Bot и функции
    взаимодействия с БД.
    """

    bot = Bot(KEY, VK_TOKEN)  # Создаем объект класса Bot через который и будем управлять ботом
    candidate = None  # Переменная, которая в дальнейшем будет хранить id предложенного кандидата

    for event in bot.longpoll.listen():  # Запускаем бесконечный цикл, начинаем слушать сервер ВК
        if event.type == bot.VkEventType.MESSAGE_NEW and event.to_me and event.text:  # И если пришло текстовое сообщен.
            received_message = event.text  # Сохраняем полученное сообщение
            received_message_lower = received_message.lower()
            user_id = event.user_id  # Получаем ID пользователя, который прислал нам сообщение

            user_info = bot.get_user_info(user_id)  # Получаем подробную информацию о пользователе в виде json
            user_name = user_info['first_name']
            rec_vk_user(user_info)  # вызов функции от Артёма для записи юзера в БД

            if received_message_lower in ('привет', 'начать'):
                bot.write_message(user_id,
                                  f'Привет, {user_name}, я умный бот. Я могу найти для вас отличного кандидата '
                                  f'для знакомства. Воспользуйтесь одной из моих функций. Для этого '
                                  f'введите команду сами или нажмите на соответствующую кнопку. Я понимаю следующие '
                                  f'команды: \n"Предложить кандидата"\n"В избранное"\n"В черный список"\n'
                                  f'"Список избранных"')

            elif received_message_lower == 'в избранное':
                if candidate:
                    rec_favorites(candidate, user_id)  # вызов функции от Артёма для записи candidate в Избранное
                    bot.write_message(user_id, 'Предложенный кандидат добавлен в избранное')
                    candidate = None
                else:
                    bot.write_message(user_id, 'Сначала выберите кандидата, кого добавлять в избранное')

            elif received_message_lower == 'предложить кандидата':
                candidate = bot.send_candidate(user_info)

            elif received_message_lower == 'список избранных':
                bot.write_message(user_id, 'Ваш список избранных:')
                bot.send_favorites_list_to_user(user_id)

            elif received_message_lower == 'в черный список':
                if candidate:
                    rec_blocked(candidate, user_id)  # вызов функции от Артёма для записи candidate в ЧС
                    bot.write_message(user_id, 'Предложенный кандидат добавлен в черный список')
                    candidate = None
                else:
                    bot.write_message(user_id, 'Сначала выберите кандидата, кого добавлять в черный список')

            elif received_message_lower == 'свой токен':
                bot.write_message(user_id, 'Вы можете ввести свой токен, через который будет осуществляться подбор '
                                           'кандидатов. Это должен быть токен с правами доступа пользователя. Если '
                                           'токен окажется некорректным, то будет использоваться стандартный токен. '
                                           'Для ввода своего токена, отправьте его отдельным сообщением в следующем '
                                           'формате: \n\nмой токен = мой самый секретный токен\n\nОбратите внимание, '
                                           'токен вводится без кавычек, регистр букв текста "мой токен" не важен, '
                                           'пробелы между знаком равенства не важны.')

            # Проверяем, начинается ли сообщение со слов "мой токен =" в любом регистре с пробелами и без между равно
            elif re.match(r'[Мм][Оо][Йй] [Тт][Оо][Кк][Ее][Нн] *= *', received_message):
                bot.write_message(user_id, 'Ваш токен принят к использованию')
                new_token = received_message.split('=')[1].strip()
                bot.user_new_vk_token = new_token

            else:
                message = 'Ничего не понятно, но очень интересно!\nЛучше воспользуйтесь одной из моих возможностей'
                bot.write_message(user_id, message=message)


if __name__ == '__main__':
    main()
